// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`API Routes GET /participant/:participantId should fail when the participant does not exist 1`] = `
{
  "error": "Unknown participantId",
}
`;

exports[`API Routes GET /participant/:participantId should fail when the participant is invalid 1`] = `
{
  "error": "participantId must be a valid UUID",
}
`;

exports[`API Routes GET /participant/:participantId should retrieve public information about a participant 1`] = `
{
  "publicInfo": {
    "participantHasDoneSomething": true,
  },
}
`;

exports[`API Routes GET /session/:sessionId should fail when the session does not exist 1`] = `
{
  "error": "Unknown sessionId",
}
`;

exports[`API Routes GET /session/:sessionId should fail when the sessionId is invalid 1`] = `
{
  "error": "sessionId must be a valid UUID",
}
`;

exports[`API Routes GET /session/:sessionId should retrieve public information about a session 1`] = `
{
  "publicInfo": {
    "dolor": "sit",
  },
}
`;

exports[`API Routes GET /study/:studyId/count/:countType should fail when the countType does not exist 1`] = `
{
  "error": "Failed to retrieve study count",
}
`;

exports[`API Routes GET /study/:studyId/count/:countType should fail when the study does not exist 1`] = `
{
  "error": "Unknown studyId",
}
`;

exports[`API Routes GET /study/:studyId/data/:dataType/json should download a raw list of participant 1`] = `
[
  "participantId",
  "createdAt",
  "updatedAt",
  "privateInfo",
  "publicInfo",
  "Sessions.sessionId",
]
`;

exports[`API Routes GET /study/:studyId/data/:dataType/json should download a raw list of responses 1`] = `
[
  "responseId",
  "createdAt",
  "updatedAt",
  "name",
  "payload",
  "sessionId",
  "Session.participantId",
]
`;

exports[`API Routes GET /study/:studyId/data/:dataType/json should download a raw list of sessions 1`] = `
[
  "sessionId",
  "createdAt",
  "updatedAt",
  "privateInfo",
  "publicInfo",
  "finished",
  "participantId",
  "studyId",
  "metadata",
]
`;

exports[`API Routes GET /study/:studyId/data/:dataType/json should download an extracted list of responses (in CSV format) 1`] = `"responseId,createdAt,updatedAt,name,sessionId,key_1,key_2"`;

exports[`API Routes GET /study/:studyId/data/:dataType/json should download an extracted list of responses 1`] = `
[
  "responseId",
  "createdAt",
  "updatedAt",
  "name",
  "sessionId",
  "key_1",
  "key_2",
]
`;

exports[`API Routes GET /study/:studyId/data/:dataType/json should fail when the study does not exist 1`] = `
{
  "error": "Unknown studyId",
}
`;

exports[`API Routes GET /study/:studyId/data/:dataType/json should handle studies without payload as well 1`] = `
[
  "responseId",
  "createdAt",
  "updatedAt",
  "name",
  "sessionId",
]
`;

exports[`API Routes GET /study/:studyId/data/:dataType/json should require authentication 1`] = `
{
  "error": "Authentication via API Key required",
}
`;

exports[`API Routes GET /study/:studyId/data/:dataType/json should require the correct API KEY 1`] = `
{
  "error": "The provided API Key is invalid.",
}
`;

exports[`API Routes POST /response should fail to submit a response when the session does not exist 1`] = `
{
  "error": "Unknown sessionId",
}
`;

exports[`API Routes POST /response should fail to submit a response when the sessionId is invalid 1`] = `
{
  "error": "sessionId must be a valid UUID",
}
`;

exports[`API Routes POST /response should fail to submit non-JSON payload 1`] = `
{
  "error": "payload must be a \`object\` type, but the final value was: \`"this-is-not-json"\`.",
}
`;

exports[`API Routes POST /session missing studyId should lead to an error 1`] = `
{
  "error": "studyId is a required field",
}
`;

exports[`API Routes POST /session should validate extra info 1`] = `
{
  "error": "privateInfo must be a \`object\` type, but the final value was: \`10\`.",
}
`;

exports[`API Routes POST /session/finish should fail when the session does not exist 1`] = `
{
  "error": "Unknown sessionId",
}
`;

exports[`API Routes POST /session/finish should fail when the sessionId is invalid 1`] = `
{
  "error": "sessionId must be a valid UUID",
}
`;

exports[`API Routes POST /session/finish should mark a session as finished 1`] = `
{
  "success": true,
}
`;

exports[`API Routes POST /study should validate extra info 1`] = `
{
  "error": "privateInfo must be a \`object\` type, but the final value was: \`10\`.",
}
`;

exports[`API Routes PUT /participant/:participantId should fail when the participant does not exist 1`] = `
{
  "error": "Unknown participantId",
}
`;

exports[`API Routes PUT /participant/:participantId should fail when the participant is invalid 1`] = `
{
  "error": "participantId must be a valid UUID",
}
`;

exports[`API Routes PUT /participant/:participantId should update an existing participant 1`] = `
{
  "success": true,
}
`;

exports[`API Routes PUT /session/:sessionId should fail when the session does not exist 1`] = `
{
  "error": "Unknown sessionId",
}
`;

exports[`API Routes PUT /session/:sessionId should fail when the sessionId is invalid 1`] = `
{
  "error": "sessionId must be a valid UUID",
}
`;

exports[`API Routes PUT /session/:sessionId should update a session 1`] = `
{
  "success": true,
}
`;
